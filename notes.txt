A text file where I'm scribbling shit to make sure I don't forget anything.


The design of the website. 

    * There is a text box where you type.
    * Above the text box the sentence to be typed will be shown. On top of that will be furigana. 
    * Below the text box will be the English translation. And below the Japanese sentence and above the text box will be the romaji.


Features of the website

    * The website learns how many kanjis the user knows. And slowly adds the kanji to let them learn as they type. 
    * For the first time the website shows the romaji and english translation but it will eventually disappear. if the user makes mistakes the romaji will appear and put the kanji back into the learning list from the learned list.
    * A small window like thing on the top right maybe? that takes in a word and fetches the meaning of the word. 
    * If possible adapt to the user's learning speed making their learning as fast as possible. (maybe let them pick a speed)
    * They can add vocabulary if they want to learn. 

    Just show the sentence in english and let them type it in japanese? Do this for the test mode? 


Reasons to use LLM to generate sentence instead of a Sentence bank.

    * The LLM will be optimised to generate minimum number of sentence. Cover as much kanji as possible in minimum number of sentence while compared to the sentence bank. 
    * Choosing a theme. Let's say the user wants to learn a specific type of slang. If they want to learn formal language that is used in office and interviews or casual language that's used with friends, or regional slangs or old Japanese or Text book japanese. 

    Tips for creating LLM
        * Create 5 LLMs which create sentences on a scale of hardness from N1 to N5. If the user level is N5 then use the N5 LLM and then do all the processing. This way the user gets easier sentence. 
        * 


Technical Details. 
    
    * Need to write a alogrithm that keeps track of how much the user is remembering. The job of the LLM is just to take given couple of kanjis and generate a sentence.
    * The alogrithm will generate the kanjis as input to the LLM. based on what the user has already typed and what the user is struggling with. 
        * the new kanjis will have more priorities, but along with that the kanjis which was mistaken or taken help for to remember will have more priority. This will be taken care by the algorithm.
        * the other kanjis that the user already remembers will be cycled through in a very small frequency. and the algorithm also needs to keep track of which kanjis are most typed. 
    * The number of kanjis that the algorithm returns will be based on the sentence length that the user wants to type. ex: if the user wants to type a sentece of length 50 characters, the kanjis returned by the algorithm maybe 5, of which 3 of them are revision and 2 from currently learning list. 
    * I have to manually decide the number of times the user types a kanji before it gets moved to the learned list. Maybe find a optimal way later on. 
    * The algorithm can be simple. Just have a dictionary, with the number of times the kanji has been typed. based on this return the 3 kanji that has been typed least number of times. 
    * handle the case where the same sentence can be repeated multiple times when the user is learning. return a different sentence and do not give the same sentence for atleast 25 times. 

Things to keep track of

    * The number of times a kanji has been typed by the user. 
    * Total number of sentence and characters typed (Just to show a nice graph?)
    * Total unique words typed in website. (Again only for nice statistics) 
    * Time spent on the website. (For visualization and user consumption only)


Release

    * For the first stage of the development, I'm going to just build a empty page with a text box and the text and some minimal requirements. where there is a sentence with kanji and the user can type it. 


Other Details

    * Currently going to just use flask. but later might migrate to Django if needed. 
    * For the front end, React js or next js.
    * The option to add the kanji that user already learnt will be given.  


Help section (need to find a better name). 
    
    * Use cutlet package to convert japanese to romaji.  (https://github.com/polm/cutlet) 
    * sentence bank was downloaded from tomoni. (https://tatoeba.org/en/downloads)
    * Use pykakasi to convert Kanji to Hiragana


website lists for fetching kanji lists
    * https://www.kanshudo.com/collections/jlpt_kanji
    



Website Structure
    * "/home" or "/". "/home" will be redirected to "/". A basic home page with User's learning statistics and stuff. If they are logged in. 
    * "/type" the typing page where they practice and study. We still show minimal statistics
    * "/stats" Nice visualization and forecasting maybe? how many kanji can they cover in the next three months? or maybe when they will be fluent in a language? based on their performance till now.
    (can't use "/statistics" conflict with internal library)
    * "/blog" inside the /blog for everything we create a page. Maybe a page to show who we are what we are doing? release notes. FAQs. Shortcuts. Maybe something about the related exams? JLPT updates? Just the static pages with information to user. And also the polls for the next features goes here.


    * need a nice onboarding page for setting up the variables like the learned kanji learning kanji. the user study pace and all that. 



